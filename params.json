{"name":"Java2typescript","tagline":"A bridge between a Java model, REST services and Typescript definition","body":"## Purpose\r\n\r\n**Java2Typescript** provides a bridge between a **Java** REST service definition and a **Typescript** client. \r\n\r\nIt enables to expose the full DTO model and REST services API as a clean typescript definition file, thus enabling strong type checking on the model of your application.\r\n\r\nThis project is composed of 3 modules :\r\n* **[java2typescript-jackson](java2typescript-jackson)**: A [Jackson](http://jackson.codehaus.org/) module that generate **typescript** definition files for Java classes, using a Jackson ObjectMapper.\r\n* **[java2typescript-jaxrs](java2typescript-jaxrs)**: An extension to **java2typescript-jackson** that takes a [JAX-RS](https://jax-rs-spec.java.net/) annotated java class and produces both :\r\n * A Typescript definition file of the service (`.d.ts`), together with description of all needed DTO objects. \r\n * An implementation `.js `of the above definition as REST client stub. \r\n* **[java2typescript-maven-plugin](java2typescript-maven-plugin)**: A maven plugin to automate the generation of `.d.ts` and `.js` implementation of REST services.\r\n* A **[sample web application](sample-web-app)** that demonstrate the usage of **java2typescript**\r\n\r\n## Big picture\r\n\r\nHere is a schema of the workflow for a typical project using **j2ts** :\r\n![j2ts workflow](img/j2ts-workflow.png)\r\n\r\nThere are only two source files here :\r\n* Server side: `AppRest.java` with annotated JAX-RS services\r\n* Client side: `App.ts` \r\n\r\nThe detailed workflow is:\r\n\r\n1. `AppRest.java` contains the annotated **JAX-RS** service definition\r\n2. **j2ts** compiles the REST service definition into a `.d.ts` description file, and a `.js` file (runtime implementation)\r\n3. `App.ts` imports and uses the `.d.ts` file\r\n4. `App.ts` is compiled into a `App.js` file (by typescript compiler)\r\n\r\n# Usage\r\n\r\nPlease refer to the documentation of the [maven plugin](java2typescript-maven-plugin) and the example below\r\n\r\n# Example\r\n\r\n**java2typescript** handles all the HTTP REST standard itself, and provide REST services as vanilla Typescript methods, regardless of the HTTP method / mime to use.\r\n\r\nConsider the following JAX-RS service \r\n```java\r\n@Path( \"/people\" ) \r\npublic interface PeopleRestService {\r\n\t\r\n\t\r\n\t@Produces( { MediaType.APPLICATION_JSON } )\r\n\t@GET\r\n\tpublic Collection< Person > getPeoples( @QueryParam( \"page\") @DefaultValue( \"1\" ) final int page ) {\r\n\t\treturn peopleService.getPeople( page, 5 );\r\n\t}\r\n\r\n\t@Produces( { MediaType.APPLICATION_JSON } )\r\n\t@Path( \"/{email}\" )\r\n\t@GET\r\n\tpublic Person getPeople( @PathParam( \"email\" ) final String email ) {\r\n\t\treturn peopleService.getByEmail( email );\r\n\t}\r\n}\r\n```\r\n\r\nThe **[maven plugin](java2typescript-maven-plugin)** will produce the following typescript definition file :\r\n\r\n```typescript\r\nexport module People {\r\n\r\nexport interface PeopleRestService {\r\n    getPeopleList(page: number): Person[];\r\n    getPeople(email: string): Person;\r\n}\r\n\r\nexport interface Person {\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\nexport var rootUrl: string;\r\nexport var peopleRestService: PeopleRestService;\r\nexport var adapter: (httpMethod: string, path: string, getParams: Object, postParams: Object, body: any)=> void;\r\n}\r\n```\r\n\r\nThe module **People** contains both the definition of the DTO **Person** and the service **PeopleRestService**, it also provides 3 properties :\r\n* **rootURL** : URL of the service : Should be set before usage\r\n* **peopleRESTService** : An instance of the service\r\n* **adapter** : An adapter for RESt service call. Set to Jquery adapter by default.\r\n\r\nThen, in your application, you can call the service like so \r\n```typescript\r\n/// <reference path=\"People.d.ts\" />\r\nimport p = People;\r\nimport Person = p.Person;\r\nimport prs = p.peopleRestService;\r\n\r\np.rootUrl = \"http://someurl/root/\";\r\n\r\nvar personList : Person[] = prs.getPeopleList(1);\r\nvar onePerson : Person = prs.getPeople(\"rrr@eee.com\");\r\n\r\n```\r\n \r\nDon't forget to import the generated file **People.js** in the final HTML page.\r\n\r\n\r\n# Licence\r\n\r\nThis project is licenced under the [Apache v2.0 Licence](http://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n\r\n# Credits\r\n\r\nJackson module is inspired from the [jsonSchema module](https://github.com/FasterXML/jackson-module-jsonSchema)\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}